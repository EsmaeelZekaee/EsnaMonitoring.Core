@page  "/setup"
@using AutoMapper
@inject IEntityService<Configuration> ConfigurationService
@inject IConfigurationFactory  ConfigurationFactory
@inject IMapper  Mapper
<EditForm EditContext="@_editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary class="@_displaySummary" />
    <p class="form-group row">
        <label class="col-sm-2 col-form-label" for="mode">
            Mode
        </label>
        <div div class="col-sm-10">
            <InputSelectNumber class="form-control" id="mode" @bind-Value="_configuration.Mode">
                @foreach (var item in EsnaMonitoring.Services.Factories.ConfigurationFactory.Modes)
                {
                    <option value="@item">@item</option>
                }
            </InputSelectNumber>
        </div>
    </p>

    <p class="form-group row">
        <label class="col-sm-2 col-form-label" for="portName">
            Port Name
        </label>
        <div div class="col-sm-10">
            <InputSelect class="form-control" id="portName" @bind-Value="_configuration.PortName">
                @foreach (var item in EsnaMonitoring.Services.Factories.ConfigurationFactory.PortNames)
                {
                    <option></option>
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
    </p>

    <p class="form-group row">
        <label class="col-sm-2 col-form-label" for="stopBits">
            Stop Bits
        </label>
        <div div class="col-sm-10">
            <InputSelectNumber class="form-control" id="stopBits" @bind-Value="_configuration.StopBits">
                @foreach (var item in EsnaMonitoring.Services.Factories.ConfigurationFactory.StopBitses)
                {
                    <option value="@item">@item</option>
                }
            </InputSelectNumber>
        </div>
    </p>

    <p class="form-group row">
        <label class="col-sm-2 col-form-label" for="dataBits">
            Data Bits
        </label>
        <div div class="col-sm-10">
            <InputSelectNumber class="form-control" id="dataBits" @bind-Value="_configuration.DataBits">
                @foreach (var item in EsnaMonitoring.Services.Factories.ConfigurationFactory.DataBitses)
                {
                    <option value="@item">@item</option>
                }
            </InputSelectNumber>
        </div>
    </p>

    <p class="form-group row">
        <label class="col-sm-2 col-form-label" for="parity">
            Parity
        </label>
        <div div class="col-sm-10">
            <InputSelectNumber class="form-control" id="parity" @bind-Value="_configuration.Parity">
                @foreach (var item in EsnaMonitoring.Services.Factories.ConfigurationFactory.Parities)
                {
                    <option value="@item">@item</option>
                }
            </InputSelectNumber>
        </div>
    </p>

    <p class="form-group row">
        <label class="col-sm-2 col-form-label" for="timeout">
            Timeout
        </label>
        <div div class="col-sm-10">
            <InputSelectNumber class="form-control" id="timeout" @bind-Value="_configuration.Timeout">
                @foreach (var item in EsnaMonitoring.Services.Factories.ConfigurationFactory.Timeouts)
                {

                    <option value="@item">@(EnumExtension.GetEnumDisplay<Timeout>(item))</option>
                }
            </InputSelectNumber>
        </div>
    </p>
    <button type="submit" class="btn btn-primary mb-2">Submit</button>
</EditForm>

@code {
    private ConfigurationModel _configuration;

    private EditContext _editContext;

    private bool _formInvalid = true;

    private string _displaySummary;

    protected override async Task OnInitializedAsync()
    {
        _configuration = await ConfigurationFactory.GetConfigurationAsync();
        _editContext = new EditContext(_configuration);
        _displaySummary = string.Empty;
        await base.OnInitializedAsync();
        _editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        _formInvalid = !_editContext.Validate();
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (_formInvalid)
            _displaySummary = "display:block";

        var configurationEntity = await ConfigurationService.FindAsync(_configuration.Id);

        if (configurationEntity == null)
        {
            configurationEntity = new Configuration();
        }

        configurationEntity = Mapper.Map(_configuration, configurationEntity);
        if (configurationEntity.Id == 0)
            await ConfigurationService.AddAsync(configurationEntity);
        else
            await ConfigurationService.UpdateAsync(configurationEntity);

        await ConfigurationService.SaveChangesAsync();
    }


}