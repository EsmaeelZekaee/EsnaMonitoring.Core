@using Microsoft.AspNetCore.SignalR.Client
@page "/"
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider;
<div class="devices">
    @{
        foreach (var item in devices)
        {
            <DeviceBox @key="@item" Device="item.Value" />
            if (item.Value.Model == ModBusDevice.DeviceModel.Au)
            {
                <span>@((item.Value as AUDevice).Data.Count(x => x == 0));</span>
            }
        }
    }
</div>
@code{
    HubConnection hubConnection;

    Dictionary<string, ModBusDevice> devices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        devices = new Dictionary<string, ModBusDevice>();
        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/modbusHub"))
           .Build();

        hubConnection.On<Device>("EntityUpdated", (device) =>
        {
            var modBusDevice = ModBusDevice.CreateDevice(device.UnitId, device.Code, device.MacAddress);
            if (devices.ContainsKey(modBusDevice.MacAddress) == false)
            {
                devices[modBusDevice.MacAddress] = modBusDevice;
            }
            try
            {
                base.StateHasChanged();
            }
            catch (Exception)
            {
            }
        });

       hubConnection.On<BaseEntity<long>>("EntityAdded", (recorde) =>
       {

       });

          hubConnection.On("OnMessage", () =>
       {

       });
        await hubConnection.StartAsync();
    }
}