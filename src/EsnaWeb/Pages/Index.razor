@using Microsoft.AspNetCore.SignalR.Client
@page "/"
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider;
<div class="devices">
    @{
        foreach (var item in devices)
        {
            <DeviceBox @key="@item" Device="item.Value" />
        }
    }
</div>
@code{
    HubConnection hubConnection;

    Dictionary<string, ModBusDevice> devices;

    protected override async Task OnInitializedAsync()
    {
        devices = new Dictionary<string, ModBusDevice>();
        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/modbusHub"))
           .Build();

        hubConnection.On<Device>("EntityUpdated", (device) =>
        {
            var modBusDevice = ModBusDevice.CreateDevice(device.UnitId, device.Code, device.MacAddress);
            if (devices.ContainsKey(modBusDevice.MacAddress) == false)
            {
                devices[modBusDevice.MacAddress] = modBusDevice;
            }
            try
            {
                base.StateHasChanged();
            }
            catch (Exception)
            {
            }
        });

        hubConnection.On<string, string>("EntityAdded", (json, type) =>
        {
            var entity = System.Text.Json.JsonSerializer.Deserialize(json, Type.GetType(type));
            if (entity is EsnaData.Entities.Recorde record)
            {
                if (devices.ContainsKey(record.Device.MacAddress) == false)
                {
                    devices.Add(record.Device.MacAddress, ModBusDevice.CreateDevice(record.Device.UnitId, record.Device.Code, record.Device.MacAddress));
                    base.StateHasChanged();
                }

                devices[record.Device.MacAddress].Data = record.ShortData;
            }

        });
        await hubConnection.StartAsync();
    }
}