@page "/"
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfigurationFactory ConfigurationFactory
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider;
<div class="devices">
    @{
        foreach (var item in devices)
        {
            <DeviceBox @key="@item" Device="item.Value" />
        }
    }
</div>
<div class="fixed-bottom">
    <div class="status-bar">
        Port: @_configurationModel.PortName | BaudRate: @_configurationModel.BaudRate | Mode: @_configurationModel.Mode | StopBits: @_configurationModel.StopBits | Parity: @_configurationModel.Parity
    </div>
</div>
@code{
    private HubConnection _hubConnection;
    private ConfigurationModel _configurationModel;

    Dictionary<string, ModBusDevice> devices;

    protected override async Task OnInitializedAsync()
    {
        _configurationModel = ConfigurationFactory.GetConfiguration();

        devices = new Dictionary<string, ModBusDevice>();
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/modbusHub")).Build();



        _hubConnection.On<Device>("EntityUpdated", device =>
            {
                var modBusDevice = ModBusDevice.CreateDevice(device.UnitId, device.Code, device.MacAddress);
                if (devices.ContainsKey(modBusDevice.MacAddress) == false)
                {
                    devices[modBusDevice.MacAddress] = modBusDevice;
                }

                try
                {
                    StateHasChanged();
                }
                catch (Exception)
                {
                }
            });

        _hubConnection.On<string, string>("EntityAdded", (json, type) =>
            {
                var entity = JsonSerializer.Deserialize(json, Type.GetType(type));
                if (entity is Recorde record)
                {
                    if (devices.ContainsKey(record.Device.MacAddress) == false)
                    {
                        devices.Add(record.Device.MacAddress, ModBusDevice.CreateDevice(record.Device.UnitId, record.Device.Code, record.Device.MacAddress));
                        StateHasChanged();
                    }

                    devices[record.Device.MacAddress].Data = record.ShortData;
                }
            });
        await _hubConnection.StartAsync();
    }


}