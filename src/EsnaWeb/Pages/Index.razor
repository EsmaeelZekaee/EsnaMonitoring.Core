@using Microsoft.AspNetCore.SignalR.Client
@page "/"
@inject NavigationManager NavigationManager
@inject TimerService TimerService;
@inject IServiceProvider ServiceProvider;
<div class="devices">
    @{
        foreach (var item in devices)
        {
            <DeviceBox @key="@item" Device="item.Value" />
            if (item.Value.Model == ModBusDevice.DeviceModel.Au)
            {
                <span>@((item.Value as AUDevice).Data.Count(x => x == 0));</span>
            }
        }
    }
</div>
@code{
    HubConnection hubConnection;

    Dictionary<string, ModBusDevice> devices { get; set; }

    //private (int row, int cols) GetRowsAndCols(int windows)
    //{
    //    var sums = new List<(int row, int col, int sum)>();
    //    for (var i = 1; i <= windows / 2; i++)
    //    {

    //        if (windows % i == 0)
    //        {
    //            sums.Add((windows / i, i, windows / i + i));
    //        }
    //    }
    //    return sums.OrderBy(x => x.sum).Select(x => (x.row, x.col)).First();
    //}

    protected override async Task OnInitializedAsync()
    {
        devices = new Dictionary<string, ModBusDevice>();
        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/modbusHub"))
           .Build();

        hubConnection.On<byte, string, string, short[]>("SendMessage", (unitId, code, macAddress, data) =>
        {
            var modBusDevice = ModBusDevice.CreateDevice(unitId, code, macAddress);
            if (devices.ContainsKey(modBusDevice.MacAddress) == false)
            {
                devices[modBusDevice.MacAddress] = modBusDevice;
            }
            devices[modBusDevice.MacAddress].Data = data;
            try
            {
                base.StateHasChanged();
            }
            catch (Exception)
            {
            }
        });

        await hubConnection.StartAsync();
    }


}